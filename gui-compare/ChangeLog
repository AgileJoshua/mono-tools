2007-12-27  Chris Toshok <toshok@ximian.com> 

	* MainWindow.cs: repopulate the model if any of the View actions change. 
	  also, take into account the view actions when populating the tree model.
	* gtk-gui/MainWindow.cs, gtk-gui/gui.stetic: add a View menu for showing
	  errors/missing/extra/present items

2007-12-27  Chris Toshok <toshok@ximian.com> 

	* CecilMetadata.cs: skip special named fields, and start dealing with
	  attributes.
	* Metadata.cs: kinda gross, but make CompProperty subclass from
	  ICompMemberContainer so that we can reuse all the code to check if the
	  methods (set_*/get_*) match.  Also, add CompAttribute
	* CompareContext.cs: duplicate some code to deal with attribute comparisons
	  (need to factor this out somehow).
	* MasterMetadata.cs: start dealing with attributes
	* Masterinfo.cs: make more stuff public.

2007-12-26  Chris Toshok <toshok@ximian.com> 

	* CecilMetadata.cs: populate the property/event lists, and add
	  CecilProperty/CecilEvent.  return the enum list properly.
	* MasterMetadata.cs: more stuff added
	* Masterinfo.cs: make more things public

2007-12-26  Miguel de Icaza <miguel@novell.com>

	* CecilMetadata.cs: Do not crash on empty type_def.BaseType (happens 
	for System.Object).
	
	(CecilAssembly): skip over nested types, and ignore NotPublic types 
	as well.
	
	(PopulateTypeLists): Do not insert NestedPrivate and NestedAssembly as
	public APIs either.

2007-12-18  Miguel de Icaza <miguel@novell.com>

	* InfoManager.cs: 

2007-12-18  Miguel de Icaza <miguel@novell.com> 

	* MainWindow.cs: New file, from MonoDevelop, copy mot of the code from
	  CompareWindow here.
	* Main.cs: new file, generated by MonoDevelop
	* InfoManager.cs: New file, this tracks and downloads new masterinfos if
	  required on demand.
	* CompareContext.cs: Now the CompareContext uses two delegates of type
	  LoadCompAssembly to do the comparison. 

2007-12-07  Chris Toshok  <toshok@ximian.com>

	* Metadata.cs (CompClass): add GetNestedClass() method.

	* Masterinfo.cs (XMLClass): make nested public.

	* CompareWindow.cs (PerformCompare): abstract out what was in the
	body of SetAssemblyPath, so we can restart a comparison whenever
	we want -- when a new masterinfo is available, when the .dll has
	changed, etc.

	* CompareContext.cs (CompareThread): comment out call to
	DumpComparison.
	(CompareClassLists): abstract out the body of CompareClasses so it
	can be reused for nested classes as well as toplevel.  Call
	CompareClassLists recursively to handle nested classes.  Also, fix
	an &&/|| thinko.
	(CompareTypes): just call CompareClassLists.
	(CompareMethods): start implementation.
	(AddExtraMethod, AddMissingMethod): implement.

	* MasterMetadata.cs (MasterClass.GetMethods,
	MasterClass.GetConstructors): don't throw NIE.  instead return an
	empty list.  this causes all methods to show up as extra, but it
	keeps us from crashing.
	(MasterClass.GetNestedClasses): implement.

	* CecilMetadata.cs (CecilClass.GetConstructors): return empty
	list, don't throw NIE.
	(CecilClass.GetNestedClasses): implement.
