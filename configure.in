AC_INIT([mono-tools], [1.9])
AC_CONFIG_SRCDIR([README])
AM_INIT_AUTOMAKE([tar-ustar])
AC_CANONICAL_SYSTEM
AM_MAINTAINER_MODE

AC_PROG_INSTALL

dnl C# compiler
AC_PATH_PROG(MCS, mcs, no)
AC_PATH_PROG(GMCS, gmcs, no)
AC_PATH_PROG(RUNTIME, mono, no)

CS="C#"
if test "x$MCS" = "xno"  ; then
	dnl AC_MSG_ERROR([You need to install a C# compiler])
	AC_MSG_ERROR([No $CS compiler found])
fi

if test "x$RUNTIME" = "xno" ; then
	AC_MSG_ERROR([No runtime found])
fi

dnl resgen
AC_PATH_PROG(RESGEN, resgen, no)
if test "x$RESGEN" = "xno"  ; then
	AC_MSG_ERROR([resgen not found in $PATH])
fi

AC_SUBST(MCS)
AC_SUBST(GMCS)
AC_SUBST(RUNTIME)
AC_SUBST(RESGEN)

PKG_CHECK_MODULES(NUNIT, mono-nunit)
AC_SUBST(NUNIT_LIBS)

PKG_CHECK_MODULES(MONODOC, monodoc)
AC_SUBST(MONODOC_LIBS)

PKG_CHECK_MODULES(GTK_SHARP, gtk-sharp-2.0 glade-sharp-2.0 gnome-sharp-2.0 gconf-sharp-2.0)
#PKG_CHECK_MODULES(GTK_SHARP, gtk-sharp glade-sharp gconf-sharp)
AC_SUBST(GTK_SHARP_LIBS)

PKG_CHECK_MODULES(GTKHTML_SHARP, gtkhtml-sharp-3.14, enable_gtkhtml=yes, enable_gtkhtml=no)
if test "x$enable_gtkhtml" = "xyes"; then
CSHARP_FLAGS="-d:GTKHTML_SHARP_3_14"
else
PKG_CHECK_MODULES(GTKHTML_SHARP, gtkhtml-sharp-2.0, enable_gtkhtml=yes, enable_gtkhtml=no)
CSHARP_FLAGS=
fi
AC_SUBST(GTKHTML_SHARP_LIBS)
AC_SUBST(CSHARP_FLAGS)
AM_CONDITIONAL(ENABLE_GTKHTML, test "x$enable_gtkhtml" = "xyes")

PKG_CHECK_MODULES(GECKO_SHARP, gecko-sharp-2.0, enable_gecko=yes, enable_gecko=no)
AC_SUBST(GECKO_SHARP_LIBS)
AM_CONDITIONAL(ENABLE_GECKO, test "x$enable_gecko" = "xyes")

if test "x$enable_gecko" = "xyes"; then
   # get the mozilla home directory
   MOZILLA_HOME="`$PKG_CONFIG --variable=libdir mozilla-gtkmozembed`"
   AC_SUBST(MOZILLA_HOME)
fi


if test "x$enable_gtkhtml$enable_gecko" = "xnono" ; then
   AC_MSG_ERROR([no HTML display found. You need either gtkhtml or gecko])
fi

dnl
dnl I hate PKG_CONFIG_MODULES, that is for the weak
dnl
if pkg-config --modversion cecil>/dev/null; then
AC_MSG_RESULT("Found cecil.pc")
else
AC_MSG_ERROR([You are missing Cecil (cecil.pc for packageconfig) required for gui-compare])
fi

CECIL_ASM=`pkg-config --variable=Libraries cecil`
AC_SUBST(CECIL_ASM)

dnl Intl
GETTEXT_PACKAGE=mono-tools
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [Gettext package])
ALL_LINGUAS="da es fr ca pt_BR"
AM_GLIB_GNU_GETTEXT

GNUNIT_VERSION=0.5
AC_SUBST(GNUNIT_VERSION)

AC_PROG_AWK
export VERSION
[TOOLS_VERSION=$($AWK 'BEGIN {
  split (ENVIRON["VERSION"] ".0.0.0", vsplit, ".")
  if(length(vsplit [1]) > 4) {
    split (substr(ENVIRON["VERSION"], 0, 4) "." substr(ENVIRON["VERSION"], 5) ".0.0", vsplit, ".")
  }
  print vsplit [1] "." vsplit [2] "." vsplit [3] "." vsplit [4]
}')]

AC_SUBST(TOOLS_VERSION)

GENDARME_VERSION=0.0.5.5
AC_SUBST(GENDARME_VERSION)

AC_OUTPUT([
Makefile
gnunit/Makefile
gnunit/art/Makefile
gnunit/src/Makefile
gnunit/src/AssemblyInfo.cs
gnunit/src/catalog.cs
gui-compare/Makefile
gui-compare/gui-compare
docbrowser/Makefile
docbrowser/monodoc
docbrowser/AssemblyInfo.cs
po/Makefile.in
asn1view/Makefile
asn1view/art/Makefile
asn1view/gtk/Makefile
asn1view/common/Makefile
ilcontrast/Makefile
ilcontrast/ilcontrast
create-native-map/Makefile
create-native-map/bin/Makefile
create-native-map/lib/Makefile
create-native-map/lib/create-native-map/Makefile
create-native-map/lib/pkgconfig/Makefile
create-native-map/lib/pkgconfig/create-native-map.pc
create-native-map/man/Makefile
create-native-map/src/Makefile
gendarme/Makefile
gendarme/AssemblyInfo.cs
gendarme/gendarme
gendarme/man/Makefile
gendarme/man/gendarme.1
gendarme/console/Makefile
gendarme/framework/Makefile
gendarme/framework/gendarme-framework.pc
gendarme/rules/Makefile
gendarme/rules/Gendarme.Rules.Security/Makefile
gendarme/rules/Gendarme.Rules.Security/Gendarme.Rules.Security.xml
gendarme/rules/Gendarme.Rules.Security/Test/Makefile
gendarme/rules/Gendarme.Rules.Performance/Makefile
gendarme/rules/Gendarme.Rules.Performance/Gendarme.Rules.Performance.xml
gendarme/rules/Gendarme.Rules.Performance/Test/Makefile
gendarme/rules/Gendarme.Rules.Concurrency/Makefile
gendarme/rules/Gendarme.Rules.Concurrency/Gendarme.Rules.Concurrency.xml
gendarme/rules/Gendarme.Rules.Concurrency/Test/Makefile
gendarme/rules/Gendarme.Rules.Correctness/Makefile
gendarme/rules/Gendarme.Rules.Correctness/Gendarme.Rules.Correctness.xml
gendarme/rules/Gendarme.Rules.Correctness/Test/Makefile
gendarme/rules/Gendarme.Rules.Portability/Makefile
gendarme/rules/Gendarme.Rules.Portability/Gendarme.Rules.Portability.xml
gendarme/rules/Gendarme.Rules.Portability/Test/Makefile
gendarme/rules/Gendarme.Rules.Exceptions/Makefile
gendarme/rules/Gendarme.Rules.Exceptions/Gendarme.Rules.Exceptions.xml
gendarme/rules/Gendarme.Rules.Exceptions/Test/Makefile
gendarme/rules/Gendarme.Rules.Ui/Makefile
gendarme/rules/Gendarme.Rules.Ui/Gendarme.Rules.Ui.xml
gendarme/rules/Gendarme.Rules.Ui/Test/Makefile
gendarme/rules/Gendarme.Rules.Naming/Makefile
gendarme/rules/Gendarme.Rules.Naming/Gendarme.Rules.Naming.xml
gendarme/rules/Gendarme.Rules.Naming/Test/Makefile
gendarme/rules/Gendarme.Rules.Smells/Makefile
gendarme/rules/Gendarme.Rules.Smells/Gendarme.Rules.Smells.xml
gendarme/rules/Gendarme.Rules.Smells/Test/Makefile
gendarme/rules/Gendarme.Rules.BadPractice/Makefile
gendarme/rules/Gendarme.Rules.BadPractice/Gendarme.Rules.BadPractice.xml
gendarme/rules/Gendarme.Rules.BadPractice/Test/Makefile
gendarme/rules/Gendarme.Rules.Design/Makefile
gendarme/rules/Gendarme.Rules.Design/Gendarme.Rules.Design.xml
gendarme/rules/Gendarme.Rules.Design/Test/Makefile
gendarme/rules/Gendarme.Rules.Interoperability/Makefile
gendarme/rules/Gendarme.Rules.Interoperability/Gendarme.Rules.Interoperability.xml
gendarme/rules/Gendarme.Rules.Interoperability/Test/Makefile
])

echo "---"
echo "Configuration summary"
echo ""
echo "   * Installation prefix = $prefix"
echo "   * gecko-sharp.dll = $enable_gecko"
echo ""
echo "      NOTE: if any of the above say 'no' you may install the"
echo "            corresponding development packages for them, rerun"
echo "            autogen.sh to include them in the build."
echo ""
