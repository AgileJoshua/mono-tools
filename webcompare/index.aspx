<%@ Page Language="C#" %>
<%@ Import Namespace="System.Web" %>
<%@ Import Namespace="System.Collections.Specialized" %>
<%@ Import Namespace="GuiCompare" %>
<!--

	  TODO:

	  Add Error messages generated by the compare process.


	  Cleanup:

	  * Change all the ComparisonNode public fields to use CamelCasing.
	  *  -->
<head>
  <style type="text/css">
.icons {
  width: 12px;
  height: 1em;
  display: inline-block;
  background: no-repeat left bottom;
}

.suffix {
	margin-left: 0.5em;
}
	  
.missing {
	background-image: url(sm.gif);
}

.extra {
	background-image: url(sx.gif);
}

.ok {
	background-image: url(sc.gif);
}

.warning {
	background-image: url(mn.png);
}

.niex {
	background-image: url(se.gif);
}

.todo {
	background-image: url(st.gif);
}

  </style>
</head>
<script runat="server" language="c#">

static string Get (int count, string kind)
{
	if (count == 0)
		return "";
	
	return String.Format ("<div style='display: inline-block;' title='{0} {2}'><div class='icons suffix {1}'></div>{0}</div>", count, kind, kind);
}
	  
static string GetStatus (ComparisonNode n)
{
	string status = 
		Get (n.Missing, "missing") +
		Get (n.Extra, "extra") +
		Get (n.Warning, "warning") +
		Get (n.Todo, "todo") +
		Get (n.Niex, "niex");

	if (status != "")
		return n.name + status;

	return n.name;
}
	  
public void Page_Load ()
{
	ComparisonNode n = global_asax.CompareContext.Comparison;

	//TreeNode tn = new TreeNode ("<img src='sm.gif' border=0 align=absmiddle>" + n.name);
	//TreeNode tn = new TreeNode (n.name);
	//TreeNode tn = new TreeNode ("<div class='ok'></div>" + n.name);

	TreeNode tn = new TreeNode (GetStatus (n), n.name);
	tn.SelectAction = TreeNodeSelectAction.None;
	tn.PopulateOnDemand = true;
	tree.Nodes.Add (tn);
}

string Missing (string member)
{
	return "<img src='sm.gif' border=0 align=absmiddle>" + member;
}

string Extra (string member)
{
	return "<img src='sx.gif' border=0 align=absmiddle>" + member;
}

string Ok (string member)
{
	return "<img src='sc.gif' border=0 align=absmiddle>" + member;
}

string Error (string member)
{
	return "<img src='se.gif' border=0 align=absmiddle>" + member;
}

string LeafMemberStatus (ComparisonNode cn)
{
	if (cn.Niex != 0)
		return Error ("");
	else
		return MemberStatus (cn);
}

string MemberStatus (ComparisonNode cn)
{
	switch (cn.status){
	case ComparisonStatus.None:
		return Ok ("");
		
	case ComparisonStatus.Missing:
		return Missing ("");
		
	case ComparisonStatus.Extra:
		return Extra ("");
		
	case ComparisonStatus.Error:
		return Error ("");

	default:
		return "Unknown status: " + cn.status;
	}
}

ComparisonNode ComparisonNodeFromTreeNode (TreeNode tn)
{
	if (tn.Parent == null){
		return global_asax.CompareContext.Comparison;
		return null;
	}
	
	var match = ComparisonNodeFromTreeNode (tn.Parent);
	if (match == null)
		return null;
	foreach (var n in match.children){
		if (n.name == tn.Value)
			return n;
	}
	return null;
}

void TreeNodePopulate (object sender, TreeNodeEventArgs e)
{
	Console.WriteLine ("Populating {0}", e.Node.Text);
	
	ComparisonNode cn = ComparisonNodeFromTreeNode (e.Node);
	if (cn == null){
		Console.WriteLine ("ERROR: Did not find the node");
		return;
	}

	foreach (var child in cn.children){
		TreeNode tn;

		switch (child.type){
		case CompType.Namespace:
			tn = new TreeNode (GetStatus (child), child.name);
			break;

		case CompType.Class:
			tn = new TreeNode (MemberStatus (child) + " class " + GetStatus (child), child.name);
			break;

		case CompType.Struct:
			tn = new TreeNode (MemberStatus (child) + "struct " + GetStatus (child), child.name);
			break;
			
		case CompType.Interface:
			tn = new TreeNode (MemberStatus (child) + "interface " + GetStatus (child), child.name);
			break;
			
		case CompType.Enum:
			tn = new TreeNode (MemberStatus (child) + "enum " + GetStatus (child), child.name);
			break;

		case CompType.Method:
			tn = new TreeNode (LeafMemberStatus (child) + child.name, child.name);
			break;
			
		case CompType.Property:
		case CompType.Field:
		case CompType.Delegate:
		case CompType.Event:
			
		case CompType.Assembly:
		case CompType.Attribute:
			tn = new TreeNode (MemberStatus (child) + " " + child.type.ToString() + " " + child.name, child.name);
			break;

		default:
			tn = new TreeNode ("Unknown type: " + child.type.ToString());
			break;
		}

		if (child.children.Count != 0)
			tn.PopulateOnDemand = true;
		
		e.Node.ChildNodes.Add (tn);
	}
}
</script>

<body>
    <%=DateTime.Now %>

    <form id="form" runat="server">
    <div>
        <asp:TreeView ID="tree" Runat="server" OnTreeNodePopulate="TreeNodePopulate"
        EnableClientScript="true"
        PopulateNodesFromClient="true"
        ExpandDepth="0">
        </asp:TreeView>
    </div>
    </form>
</body>
</html>
