<rules>
	<rule	Name="AvoidConstructorsInStaticTypesRule"
		Type="Gendarme.Rules.Correctness.AvoidConstructorsInStaticTypesRule, Gendarme.Rules.Correctness, Version=@VERSION@, Culture=neutral, PublicKeyToken=null"
		Uri="http://groups.google.com/group/gendarme/web/rules-documentation#AvoidConstructorsInStaticTypesRule" >
		<problem>The type '{0}' contains only static fields and methods and have a non static constructor.</problem>
		<solution>You should use an static constructor or make the fields and methods non-static.</solution>
	</rule>
	<rule	Name="BadRecursiveInvocationRule" 
		Type="Gendarme.Rules.Correctness.BadRecursiveInvocationRule, Gendarme.Rules.Correctness, Version=@VERSION@, Culture=neutral, PublicKeyToken=null"
		Uri="http://www.mono-project.com/Gendarme.Rules.Correctness#BadRecursiveInvocationRule" >
		<problem>Method or property '{0}' invokes itself recursively in a suspcious way.</problem>
		<solution>Ensure that the parameters vary in such a way that the recursion will terminate.</solution>
	</rule>
	<rule	Name="CallingEqualsWithNullArgRule"
		Type="Gendarme.Rules.Correctness.CallingEqualsWithNullArgRule, Gendarme.Rules.Correctness, Version=@VERSION@, Culture=neutral, PublicKeyToken=null"
		Uri="http://www.mono-project.com/Gendarme.Rules.Correctness#CallingEqualsWithNullArgRule" >
		<problem>Method '{0}' calls Object.Equals (Object) with null argument.</problem>
		<solution>Pass some other appropriate argument than null, as passing null parameter should always return false.</solution>
	</rule>
	<rule	Name="DontCompareWithNaNRule" 
		Type="Gendarme.Rules.Correctness.DontCompareWithNaNRule, Gendarme.Rules.Correctness, Version=@VERSION@, Culture=neutral, PublicKeyToken=null"
		Uri="http://www.mono-project.com/Gendarme.Rules.Correctness#DontCompareWithNaNRule" >
		<problem>Method '{0}' compares a floating point value with NaN (Not a Number) which always return false, even for (NaN == NaN).</problem>
		<solution>Replace the code with a call to either Single.IsNaN(value) or Double.IsNaN(value).</solution>
	</rule>
	<rule	Name="FloatComparisonRule"
		Type="Gendarme.Rules.Correctness.FloatComparisonRule, Gendarme.Rules.Correctness, Version=@VERSION@, Culture=neutral, PublicKeyToken=null"
		Uri="http://www.mono-project.com/Gendarme.Rules.Correctness#FloatComparisonRule" >
		<problem>The method '{0}' contais some code that performs equality operation between floating points.</problem>
		<solution>Perhaps you want get the near equality, is the number almost the same as another.</solution>
	</rule>
	<rule	Name="MethodCanBeMadeStaticRule" 
		Type="Gendarme.Rules.Correctness.MethodCanBeMadeStaticRule, Gendarme.Rules.Correctness, Version=@VERSION@, Culture=neutral, PublicKeyToken=null"
		Uri="http://www.mono-project.com/Gendarme.Rules.Correctness#MethodCanBeMadeStaticRule" >
		<problem>Method '{0}' does not use any instance fields, properties or methods and can be made static.</problem>
		<solution>Make the method static.</solution>
	</rule>
	<rule	Name="NullDerefRule"
		Type="Gendarme.Rules.Correctness.NullDerefRule, Gendarme.Rules.Correctness, Version=@VERSION@, Culture=neutral, PublicKeyToken=null"
		Uri="http://www.mono-project.com/Gendarme.Rules.Correctness#NullDerefRule" >
		<problem>Method or property '{0}' might dereference a null pointer, or cause other code to do so.</problem>
		<solution>Examine the detailed listing of problem locations, and ensure that the variables in question cannot be null.</solution>
	</rule>
	<rule	Name="UseValueInPropertySetterRule"
		Type="Gendarme.Rules.Correctness.UseValueInPropertySetterRule, Gendarme.Rules.Correctness, Version=@VERSION@, Culture=neutral, PublicKeyToken=null"
		Uri="http://www.mono-project.com/Gendarme.Rules.Correctness#UseValueInPropertySetterRule" >
		<problem>The property setter '{0}' doesn't use the value.</problem>
		<solution>You should use the value, or if you don't want use it, you should consider remove the setter property because could be confusing.</solution>
	</rule>
</rules>
