<Type Name="ReviewCastOnIntegerDivisionRule" FullName="Gendarme.Rules.Correctness.ReviewCastOnIntegerDivisionRule">
  <TypeSignature Language="C#" Value="public class ReviewCastOnIntegerDivisionRule : Gendarme.Framework.Rule, Gendarme.Framework.IMethodRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.Correctness</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Framework.Rule</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gendarme.Framework.IMethodRule</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.EngineDependency(typeof(Gendarme.Framework.Engines.OpCodeEngine))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("Make the cast to Single or Double on the operands, not on the result.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("A division between two integers is casted, too late, into a Single or Double. The result is still an integer (truncated).")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule checks when the result of a division between integral types is casted
            into a floating point type. Casting the result, instead of the operands, converts
            the integer result into a floating point value - i.e. the result is truncated.
            </summary>
    <remarks>This rule is available since Gendarme 2.2</remarks>
    <example>
            Bad example:
            <code>
            public double Bad (int a, int b)
            {
            	// integers are divided, then the result is casted into a double
            	// i.e. Bad (5, 2) == 2.0d
            	return a / b;
            }
            </code></example>
    <example>
            Good example:
            <code>
            public double Good (int a, int b)
            {
            	// a double is divided by an integer, which result in a double result
            	// i.e. Good (5, 2) == 2.5d
            	return (double) a / b;
            }
            </code></example>
    <example>
            Bad example:
            <code>
            public double Bad (int a, int b)
            {
            	// integers are divided, then the result is casted into a double
            	// i.e. Bad (5, 2) == 2.0d
            	return a / b;
            }
            </code></example>
    <example>
            Good example:
            <code>
            public double Good (int a, int b)
            {
            	// a double is divided by an integer, which result in a double result
            	// i.e. Good (5, 2) == 2.5d
            	return (double) a / b;
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReviewCastOnIntegerDivisionRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckMethod">
      <MemberSignature Language="C#" Value="public Gendarme.Framework.RuleResult CheckMethod (Mono.Cecil.MethodDefinition method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.RuleResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="Mono.Cecil.MethodDefinition" />
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
