<Type Name="ReviewUseOfInt64BitsToDoubleRule" FullName="Gendarme.Rules.Correctness.ReviewUseOfInt64BitsToDoubleRule">
  <TypeSignature Language="C#" Value="public class ReviewUseOfInt64BitsToDoubleRule : Gendarme.Framework.Rule, Gendarme.Framework.IMethodRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.Correctness</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Framework.Rule</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gendarme.Framework.IMethodRule</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.EngineDependency(typeof(Gendarme.Framework.Engines.OpCodeEngine))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("Verify the code logic. This could be a bad, non-working, convertion from an integer type into a double.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("This method calls System.BitConverter.Int64BitsToDouble(Int64) in a way that suggest it tries to convert an integer value, not the bits, into a double.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule checks for invalid integer to double conversion using the, confusinsly named,
            <c>BitConverter.Int64BitsToDouble</c> method. This methods converts the actual bits,
            i.e. not the value, into a <c>Double</c>. The rule will warn when anything else than an
            <c>Int64</c> is being used as a parameter to this method.
            </summary>
    <remarks>This rule is available since Gendarme 2.0</remarks>
    <example>
            Bad example:
            <code>
            public double GetRadians (int degrees)
            {
            	return BitConverter.Int64BitsToDouble (degrees) * Math.PI / 180.0d;
            }
            </code></example>
    <example>
            Good example:
            <code>
            public double GetRadians (int degree)
            {
            	return degrees * Math.PI / 180.0d;
            }
            </code></example>
    <example>
            Bad example:
            <code>
            public double GetRadians (int degrees)
            {
            	return BitConverter.Int64BitsToDouble (degrees) * Math.PI / 180.0d;
            }
            </code></example>
    <example>
            Good example:
            <code>
            public double GetRadians (int degree)
            {
            	return degrees * Math.PI / 180.0d;
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReviewUseOfInt64BitsToDoubleRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckMethod">
      <MemberSignature Language="C#" Value="public Gendarme.Framework.RuleResult CheckMethod (Mono.Cecil.MethodDefinition method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.RuleResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="Mono.Cecil.MethodDefinition" />
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize (Gendarme.Framework.IRunner runner);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runner" Type="Gendarme.Framework.IRunner" />
      </Parameters>
      <Docs>
        <param name="runner">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
