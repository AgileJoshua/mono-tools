<Type Name="PreferStringIsNullOrEmptyRule" FullName="Gendarme.Rules.Maintainability.PreferStringIsNullOrEmptyRule">
  <TypeSignature Language="C#" Value="public class PreferStringIsNullOrEmptyRule : Gendarme.Framework.Rule, Gendarme.Framework.IMethodRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.Maintainability</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Framework.Rule</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gendarme.Framework.IMethodRule</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.EngineDependency(typeof(Gendarme.Framework.Engines.OpCodeEngine))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("Replace both checks with a single call to String.IsNullOrEmpty(string).")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("This method does string null and length check which can be harder on code readability/maintainability.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule checks methods for cases where <c>String.IsNullOrEmpty</c> could be
            used instead of doing separate null and length checks. This does not affect
            execution nor (much) performance but it improves source code readability.
            This rule only applies to assemblies compiled with the .NET framework version
            2.0 (or later).
            </summary>
    <remarks>This rule is available since Gendarme 2.0</remarks>
    <example>
            Bad example:
            <code>
            public bool SendMessage (string message)
            {
            	if ((message == null) || (message.Length == 0)) {
            		return false;
            	}
            	return SendMessage (Encode (message));
            }
            </code></example>
    <example>
            Good example:
            <code>
            public bool SendMessage (string message)
            {
            	if (String.IsNullOrEmpty (message)) {
            		return false;
            	}
            	return SendMessage (Encode (message));
            }
            </code></example>
    <example>
            Bad example:
            <code>
            public bool SendMessage (string message)
            {
            	if ((message == null) || (message.Length == 0)) {
            		return false;
            	}
            	return SendMessage (Encode (message));
            }
            </code></example>
    <example>
            Good example:
            <code>
            public bool SendMessage (string message)
            {
            	if (String.IsNullOrEmpty (message)) {
            		return false;
            	}
            	return SendMessage (Encode (message));
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PreferStringIsNullOrEmptyRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckMethod">
      <MemberSignature Language="C#" Value="public Gendarme.Framework.RuleResult CheckMethod (Mono.Cecil.MethodDefinition method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.RuleResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="Mono.Cecil.MethodDefinition" />
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize (Gendarme.Framework.IRunner runner);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runner" Type="Gendarme.Framework.IRunner" />
      </Parameters>
      <Docs>
        <param name="runner">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
