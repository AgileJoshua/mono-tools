<Type Name="AvoidThrowingBasicExceptionsRule" FullName="Gendarme.Rules.Exceptions.AvoidThrowingBasicExceptionsRule">
  <TypeSignature Language="C#" Value="public class AvoidThrowingBasicExceptionsRule : Gendarme.Rules.Exceptions.NewExceptionsRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.Exceptions</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Rules.Exceptions.NewExceptionsRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.FxCopCompatibility("Microsoft.Usage", "CA2201:DoNotRaiseReservedExceptionTypes")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("Try to use more specific exception types. If none of existing types meet your needs, create custom exception class that inherits from System.Exception or any appropriate descendant of it.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("This method creates (and probably throws) an exception of Exception, ApplicationException or SystemException type.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule check for methods that create basic exceptions like <c>System.Exception</c>,
            <c>System.ApplicationException</c> or <c>System.SystemException</c>. Those exceptions
            do not provide enough information about an error condition to be helpful to the consumer
            of the library.
            </summary>
    <remarks>This rule is available since Gendarme 2.0</remarks>
    <example>
            Bad example:
            <code>
            public void Add (object obj)
            {
            	if (obj == null)
            		throw new Exception ();
            	Inner.Add (obj);
            }
            </code></example>
    <example>
            Good example:
            <code>
            public void Add (object obj)
            {
            	if (obj == null)
            		throw new ArgumentNullException ("obj");
            	Inner.Add (obj);
            }
            </code></example>
    <example>
            Bad example:
            <code>
            public void Add (object obj)
            {
            	if (obj == null)
            		throw new Exception ();
            	Inner.Add (obj);
            }
            </code></example>
    <example>
            Good example:
            <code>
            public void Add (object obj)
            {
            	if (obj == null)
            		throw new ArgumentNullException ("obj");
            	Inner.Add (obj);
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AvoidThrowingBasicExceptionsRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExceptionTypes">
      <MemberSignature Language="C#" Value="protected override string[] GetExceptionTypes ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Severity">
      <MemberSignature Language="C#" Value="protected override Gendarme.Framework.Severity Severity { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.Severity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
