<Type Name="InstantiateArgumentExceptionCorrectlyRule" FullName="Gendarme.Rules.Exceptions.InstantiateArgumentExceptionCorrectlyRule">
  <TypeSignature Language="C#" Value="public class InstantiateArgumentExceptionCorrectlyRule : Gendarme.Framework.Rule, Gendarme.Framework.IMethodRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.Exceptions</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Framework.Rule</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gendarme.Framework.IMethodRule</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.FxCopCompatibility("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.EngineDependency(typeof(Gendarme.Framework.Engines.OpCodeEngine))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("Fix the exception parameters to use the correct parameter name (or make sure the parameters are in the right order).")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("This method throws ArgumentException (or derived) exceptions without specifying an existing parameter name. This can hide useful information to developers.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule check that any <c>System.ArgumentException</c>,
            <c>System.ArgumentNullException</c>, <c>System.ArgumentOutOfRangeException</c> or
            <c>System.DuplicateWaitObjectException</c> exception created to ensure the order of
            their parameters, in particular the position of <c>parameterName</c>, is correct.
            This is a common mistake since the position is not consistent across all exceptions.
            </summary>
    <remarks>This rule is available since Gendarme 2.2</remarks>
    <example>
            Bad example:
            <code>
            public void Show (string s)
            {
            	if (s == null)
            		throw new ArgumentNullException ("string is null", "s");
            	if (s.Length == 0)
            		return new ArgumentException ("s", "string is empty");
            	Console.WriteLine (s);
            }
            </code></example>
    <example>
            Good example:
            <code>
            public void Show (string s)
            {
            	if (s == null)
            		throw new ArgumentNullException ("s", "string is null");
            	if (s.Length == 0)
            		return new ArgumentException ("string is empty", "s");
            	Console.WriteLine (s);
            }
            </code></example>
    <example>
            Bad example:
            <code>
            public void Show (string s)
            {
            	if (s == null)
            		throw new ArgumentNullException ("string is null", "s");
            	if (s.Length == 0)
            		return new ArgumentException ("s", "string is empty");
            	Console.WriteLine (s);
            }
            </code></example>
    <example>
            Good example:
            <code>
            public void Show (string s)
            {
            	if (s == null)
            		throw new ArgumentNullException ("s", "string is null");
            	if (s.Length == 0)
            		return new ArgumentException ("string is empty", "s");
            	Console.WriteLine (s);
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstantiateArgumentExceptionCorrectlyRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckMethod">
      <MemberSignature Language="C#" Value="public Gendarme.Framework.RuleResult CheckMethod (Mono.Cecil.MethodDefinition method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.RuleResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="Mono.Cecil.MethodDefinition" />
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
