<Type Name="DoNotSwallowErrorsCatchingNonSpecificExceptionsRule" FullName="Gendarme.Rules.Exceptions.DoNotSwallowErrorsCatchingNonSpecificExceptionsRule">
  <TypeSignature Language="C#" Value="public class DoNotSwallowErrorsCatchingNonSpecificExceptionsRule : Gendarme.Framework.Rule, Gendarme.Framework.IMethodRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.Exceptions</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Framework.Rule</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gendarme.Framework.IMethodRule</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.FxCopCompatibility("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("You can rethrow the original exception, to avoid destroying the stacktrace, or you can handle more specific exceptions.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("The method catch a non-specific exception. This will likely hide the original problem to the callers.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule is used for ensure that methods do not swallow the catched exceptions.
            If you decide catch a non-specific exception, you should take care, because you
            wont know exactly what went wrong. You should catch exceptions when you know why
            an exception can be thrown, and you can take a decision based on the failure.
            </summary>
    <remarks>Prior to Gendarme 2.0 this rule was named DontSwallowErrorsCatchingNonspecificExceptionsRule.</remarks>
    <example>
            Bad example:
            <code>
            try {
            	File.Open ("foo.txt", FileMode.Open);
            }
            catch (Exception) {
            	//Ooops  what's failed ??? UnauthorizedException, FileNotFoundException ???
            }
            </code></example>
    <example>
            Good example (catch a specific exception):
            <code>
            try {
            	File.Open ("foo.txt", FileMode.Open);
            }
            catch (FileNotFoundException exception) {
            	//I know that the system can't find the file.
            }
            </code></example>
    <example>
            Good example (catch all and rethrow):
            <code>
            try {
            	File.Open ("foo.txt", FileMode.Open);
            }
            catch {
            	Console.WriteLine ("An error has happened.");
            	throw;  // You don't swallow the error, because you rethrow the original exception.
            }
            </code></example>
    <example>
            Bad example:
            <code>
            try {
            	File.Open ("foo.txt", FileMode.Open);
            }
            catch (Exception) {
            	//Ooops  what's failed ??? UnauthorizedException, FileNotFoundException ???
            }
            </code></example>
    <example>
            Good example (catch a specific exception):
            <code>
            try {
            	File.Open ("foo.txt", FileMode.Open);
            }
            catch (FileNotFoundException exception) {
            	//I know that the system can't find the file.
            }
            </code></example>
    <example>
            Good example (catch all and rethrow):
            <code>
            try {
            	File.Open ("foo.txt", FileMode.Open);
            }
            catch {
            	Console.WriteLine ("An error has happened.");
            	throw;  // You don't swallow the error, because you rethrow the original exception.
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DoNotSwallowErrorsCatchingNonSpecificExceptionsRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckMethod">
      <MemberSignature Language="C#" Value="public Gendarme.Framework.RuleResult CheckMethod (Mono.Cecil.MethodDefinition method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.RuleResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="Mono.Cecil.MethodDefinition" />
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
