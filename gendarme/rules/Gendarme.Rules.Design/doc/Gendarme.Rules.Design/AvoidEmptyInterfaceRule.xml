<Type Name="AvoidEmptyInterfaceRule" FullName="Gendarme.Rules.Design.AvoidEmptyInterfaceRule">
  <TypeSignature Language="C#" Value="public class AvoidEmptyInterfaceRule : Gendarme.Framework.Rule, Gendarme.Framework.ITypeRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.Design</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Framework.Rule</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gendarme.Framework.ITypeRule</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.FxCopCompatibility("Microsoft.Design", "CA1040:AvoidEmptyInterfaces")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("Review the interface usage. If used as a marker then see if it could be replaced by using attributes.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("This interface does not define any members. This is generally a sign that the interface is used as a marker.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule checks every interface to ensure they are not empty. Empty interface don't
            add anything useful and in many case are only used as a marker on a type. For the
            last case it is more elegant to define and use an attribute.
            </summary>
    <remarks>To be added.</remarks>
    <example>
            Bad example:
            <code>
            public interface IMarker {
            }
            public class MyClass : IMarker {
            }
            </code></example>
    <example>
            Good example:
            <code>
            [MarkedByAnAttribute]
            public class MyClass {
            }
            </code></example>
    <example>
            Bad example:
            <code>
            public interface IMarker {
            }
            public class MyClass : IMarker {
            }
            </code></example>
    <example>
            Good example:
            <code>
            [MarkedByAnAttribute]
            public class MyClass {
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AvoidEmptyInterfaceRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckType">
      <MemberSignature Language="C#" Value="public Gendarme.Framework.RuleResult CheckType (Mono.Cecil.TypeDefinition type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.RuleResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Mono.Cecil.TypeDefinition" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
