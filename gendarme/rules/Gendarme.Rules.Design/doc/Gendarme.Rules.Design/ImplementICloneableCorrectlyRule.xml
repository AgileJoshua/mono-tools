<Type Name="ImplementICloneableCorrectlyRule" FullName="Gendarme.Rules.Design.ImplementICloneableCorrectlyRule">
  <TypeSignature Language="C#" Value="public class ImplementICloneableCorrectlyRule : Gendarme.Framework.Rule, Gendarme.Framework.ITypeRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.Design</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Framework.Rule</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gendarme.Framework.ITypeRule</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("Implement the ICloneable interface or change the return type to this type.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("This type provides a Clone() method returning System.Object but does not implement the ICloneable interface.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule warns every time you implement a <c>object Clone()</c> method without
            implementing the <c>System.ICloneable</c> interface. Either implement the interface
            or, if possible, change the return type to the type definition (since can avoid
            unnecessary casts).
            <list type="bullet"><description>Note: Make sure to document the behavior of your
            Clone method since the framework itself is not very clear, or consistent, between
            shallow and deep cloning.</description></list></summary>
    <remarks>Prior to Gendarme 2.2 this rule was named UsingCloneWithoutImplementingICloneableRule</remarks>
    <example>
            Bad example:
            <code>
            public class MyClass {
            	public object Clone ()
            	{
            		MyClass myClass = new MyClass ();
            		return myClass;
            	}
            }
            </code></example>
    <example>
            Good example (ICloneable):
            <code>
            public class MyClass : ICloneable {
            	public object Clone ()
            	{
            		MyClass myClass = new MyClass ();
            		return myClass;
            	}
            }
            </code></example>
    <example>
            Good example (not returning object):
            <code>
            public class MyClass {
            	public MyClass Clone ()
            	{
            		MyClass myClass = new MyClass ();
            		return myClass;
            	}
            }
            </code></example>
    <example>
            Bad example:
            <code>
            public class MyClass {
            	public object Clone ()
            	{
            		MyClass myClass = new MyClass ();
            		return myClass;
            	}
            }
            </code></example>
    <example>
            Good example (ICloneable):
            <code>
            public class MyClass : ICloneable {
            	public object Clone ()
            	{
            		MyClass myClass = new MyClass ();
            		return myClass;
            	}
            }
            </code></example>
    <example>
            Good example (not returning object):
            <code>
            public class MyClass {
            	public MyClass Clone ()
            	{
            		MyClass myClass = new MyClass ();
            		return myClass;
            	}
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ImplementICloneableCorrectlyRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckType">
      <MemberSignature Language="C#" Value="public Gendarme.Framework.RuleResult CheckType (Mono.Cecil.TypeDefinition type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.RuleResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Mono.Cecil.TypeDefinition" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
