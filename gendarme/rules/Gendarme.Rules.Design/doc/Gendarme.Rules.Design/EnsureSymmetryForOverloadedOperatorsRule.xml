<Type Name="EnsureSymmetryForOverloadedOperatorsRule" FullName="Gendarme.Rules.Design.EnsureSymmetryForOverloadedOperatorsRule">
  <TypeSignature Language="C#" Value="public class EnsureSymmetryForOverloadedOperatorsRule : Gendarme.Framework.Rule, Gendarme.Framework.ITypeRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.Design</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Framework.Rule</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gendarme.Framework.ITypeRule</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.FxCopCompatibility("Microsoft.Usage", "CA2226:OperatorsShouldHaveSymmetricalOverloads")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("Add the missing operator and keep the type operators symmetrical.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("This type should overload operators in symmetry (e.g. == and !=, + and -).")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule checks for operators that are not overloaded in pairs. Some compilers, like
            the C# compilers, forces you to implement some of the pairs, but other languages might
            not. The following pairs are checked:
            <list><description>Addition and Substraction</description><description>Multiplication and Division</description><description>Division and Modulus</description><description>Equality and Inequality</description><description>True and False</description><description>GreaterThan and LessThan</description><description>GreaterThanOrEqual and LessThanOrEqual</description></list></summary>
    <remarks>To be added.</remarks>
    <example>
            Bad example:
            <code>
            class DoesNotOverloadAdd {
            	public static int operator - (DoesNotOverloadAdd left, DoesNotOverloadAdd right)
            	{
            		return 0;
            	}
            }
            </code></example>
    <example>
            Good example:
            <code>
            class Good {
            	public static int operator + (Good right, Good left)
            	{
            		return 0;
            	}
            	public static int operator - (Good right, Good left)
            	{
            		return 0;
            	}
            }
            </code></example>
    <example>
            Bad example:
            <code>
            class DoesNotOverloadAdd {
            	public static int operator - (DoesNotOverloadAdd left, DoesNotOverloadAdd right)
            	{
            		return 0;
            	}
            }
            </code></example>
    <example>
            Good example:
            <code>
            class Good {
            	public static int operator + (Good right, Good left)
            	{
            		return 0;
            	}
            	public static int operator - (Good right, Good left)
            	{
            		return 0;
            	}
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnsureSymmetryForOverloadedOperatorsRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckType">
      <MemberSignature Language="C#" Value="public Gendarme.Framework.RuleResult CheckType (Mono.Cecil.TypeDefinition type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.RuleResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Mono.Cecil.TypeDefinition" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
