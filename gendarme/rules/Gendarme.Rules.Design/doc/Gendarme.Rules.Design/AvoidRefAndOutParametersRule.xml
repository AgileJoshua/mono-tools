<Type Name="AvoidRefAndOutParametersRule" FullName="Gendarme.Rules.Design.AvoidRefAndOutParametersRule">
  <TypeSignature Language="C#" Value="public class AvoidRefAndOutParametersRule : Gendarme.Framework.Rule, Gendarme.Framework.IMethodRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.Design</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Framework.Rule</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gendarme.Framework.IMethodRule</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.FxCopCompatibility("Microsoft.Design", "CA1045:DoNotPassTypesByReference")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.FxCopCompatibility("Microsoft.Design", "CA1021:AvoidOutParameters")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("If multiple return values are needed then refactor the method to return an object that contains them.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("This method use ref and/or out parameters in a visible API, which should be as simple as possible.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule checks for methods that use <c>ref</c> or <c>out</c> parameters.
            They are powerful features that can easily be misunderstood (by the consumer)
            and misused (by the consumer) to create hard to use API. Avoid them whenever
            possible or, if needed, provide simpler alternatives coverage most use cases.
            An exception is made, i.e. no defect are reported, for the <c>bool Try*(X out)</c>
            pattern.
            </summary>
    <remarks>This rule is available since Gendarme 2.0</remarks>
    <example>
            Bad example:
            <code>
            public bool NextJob (ref int id, out string display)
            {
            	if (id &lt; 0)
            		return false;
            	display = String.Format ("Job #{0}", id++);
            	return true;
            }
            </code></example>
    <example>
            Good example:
            <code>
            private int id = 0;
            private int GetNextId ()
            {
            	int id = this.id++;
            	return id;
            }
            public string NextJob ()
            {
            	return String.Format ("Job #{0}", Id);
            }
            </code></example>
    <example>
            Bad example:
            <code>
            public bool NextJob (ref int id, out string display)
            {
            	if (id &lt; 0)
            		return false;
            	display = String.Format ("Job #{0}", id++);
            	return true;
            }
            </code></example>
    <example>
            Good example:
            <code>
            private int id = 0;
            private int GetNextId ()
            {
            	int id = this.id++;
            	return id;
            }
            public string NextJob ()
            {
            	return String.Format ("Job #{0}", Id);
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AvoidRefAndOutParametersRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckMethod">
      <MemberSignature Language="C#" Value="public Gendarme.Framework.RuleResult CheckMethod (Mono.Cecil.MethodDefinition method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.RuleResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="Mono.Cecil.MethodDefinition" />
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
