<Type Name="MainShouldNotBePublicRule" FullName="Gendarme.Rules.Design.MainShouldNotBePublicRule">
  <TypeSignature Language="C#" Value="public class MainShouldNotBePublicRule : Gendarme.Framework.Rule, Gendarme.Framework.IAssemblyRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.Design</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Framework.Rule</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gendarme.Framework.IAssemblyRule</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("Reduce entry point visibility if your language allows it. It may not be possible in some language, like VB.NET).")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("The entry point (Main) of this assembly is visible to the outside world (ref: C# Programming Guide).")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule is used to warn developer if assembly's entry point, the so-called <c>Main</c>
            method, is exposed to other assemblies as a public method and can be accessed by them.
            It is recommended to make it private to make sure that it can be called only by CLR
            itself while executing the code.
            </summary>
    <remarks>To be added.</remarks>
    <example>
            Bad example:
            <code>
            public class MainClass {
            	public void Main ()
            	{
            	}
            }
            </code></example>
    <example>
            Good example (type is not externally visible):
            <code>
            internal class MainClass {
            	public void Main ()
            	{
            	}
            }
            </code></example>
    <example>
            Good example (method is not externally visible):
            <code>
            public class MainClass {
            	internal void Main ()
            	{
            	}
            }
            </code></example>
    <example>
            Bad example:
            <code>
            public class MainClass {
            	public void Main ()
            	{
            	}
            }
            </code></example>
    <example>
            Good example (type is not externally visible):
            <code>
            internal class MainClass {
            	public void Main ()
            	{
            	}
            }
            </code></example>
    <example>
            Good example (method is not externally visible):
            <code>
            public class MainClass {
            	internal void Main ()
            	{
            	}
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainShouldNotBePublicRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAssembly">
      <MemberSignature Language="C#" Value="public Gendarme.Framework.RuleResult CheckAssembly (Mono.Cecil.AssemblyDefinition assembly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.RuleResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="Mono.Cecil.AssemblyDefinition" />
      </Parameters>
      <Docs>
        <param name="assembly">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
