<Type Name="PreferIntegerOrStringForIndexersRule" FullName="Gendarme.Rules.Design.PreferIntegerOrStringForIndexersRule">
  <TypeSignature Language="C#" Value="public class PreferIntegerOrStringForIndexersRule : Gendarme.Framework.Rule, Gendarme.Framework.IMethodRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.Design</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Framework.Rule</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gendarme.Framework.IMethodRule</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.FxCopCompatibility("Microsoft.Design", "CA1043:UseIntegralOrStringArgumentForIndexers")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("Convert this indexer into a method if an integer or a string cannot be used.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("This indexer should be using integers or strings for its indexes.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule checks for indexer properties that use uncommon types as indexes.
            Recommanded types includes <c>Int32</c>, <c>Int64</c> and <c>String</c>.
            Other types are discouraged since they are generally better served using a method.
            </summary>
    <remarks>This rule is available since Gendarme 2.0</remarks>
    <example>
            Bad example:
            <code>
            public bool this [DateTime date] {
            	get {
            		return false;
            	}
            }
            </code></example>
    <example>
            Good example:
            <code>
            public bool IsSomethingPlanned (DateTime date)
            {
            	return false;
            }
            </code></example>
    <example>
            Bad example:
            <code>
            public bool this [DateTime date] {
            	get {
            		return false;
            	}
            }
            </code></example>
    <example>
            Good example:
            <code>
            public bool IsSomethingPlanned (DateTime date)
            {
            	return false;
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PreferIntegerOrStringForIndexersRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckMethod">
      <MemberSignature Language="C#" Value="public Gendarme.Framework.RuleResult CheckMethod (Mono.Cecil.MethodDefinition method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.RuleResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="Mono.Cecil.MethodDefinition" />
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
