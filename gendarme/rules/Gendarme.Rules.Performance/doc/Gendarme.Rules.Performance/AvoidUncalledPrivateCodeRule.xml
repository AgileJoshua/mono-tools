<Type Name="AvoidUncalledPrivateCodeRule" FullName="Gendarme.Rules.Performance.AvoidUncalledPrivateCodeRule">
  <TypeSignature Language="C#" Value="public class AvoidUncalledPrivateCodeRule : Gendarme.Framework.Rule, Gendarme.Framework.IMethodRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.Performance</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Framework.Rule</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gendarme.Framework.IMethodRule</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.FxCopCompatibility("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("Remove the non-callable code or add the code that calls it.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("This private or internal (assembly-level) member does not have callers in the assembly, is not invoked by the common language runtime, and is not invoked by a delegate.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule will check for non externally visible methods that are never called.
            The rule will warn you if a private method isn't called in it's declaring type or
            if an internal method doesn't have any callers in the assembly or isn't invoked by
            the runtime or a delegate.
            </summary>
    <remarks>To be added.</remarks>
    <example>
            Bad example:
            <code>
            public class MyClass {
            	private void MakeSuff ()
            	{
            		// ...
            	}
            	public void Method ()
            	{
            		Console.WriteLine ("Foo");
            	}
            }
            </code></example>
    <example>
            Good example (removing unused code):
            <code>
            public class MyClass {
            	public void Method ()
            	{
            		Console.WriteLine ("Foo");
            	}
            }
            </code></example>
    <example>
            Good example (use the code):
            <code>
            public class MyClass {
            	private void MakeSuff ()
            	{
            		// ...
            	}
            	public void Method ()
            	{
            		Console.WriteLine ("Foo");
            		MakeSuff ();
            	}
            }
            </code></example>
    <example>
            Bad example:
            <code>
            public class MyClass {
            	private void MakeSuff ()
            	{
            		// ...
            	}
            	public void Method ()
            	{
            		Console.WriteLine ("Foo");
            	}
            }
            </code></example>
    <example>
            Good example (removing unused code):
            <code>
            public class MyClass {
            	public void Method ()
            	{
            		Console.WriteLine ("Foo");
            	}
            }
            </code></example>
    <example>
            Good example (use the code):
            <code>
            public class MyClass {
            	private void MakeSuff ()
            	{
            		// ...
            	}
            	public void Method ()
            	{
            		Console.WriteLine ("Foo");
            		MakeSuff ();
            	}
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AvoidUncalledPrivateCodeRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckMethod">
      <MemberSignature Language="C#" Value="public Gendarme.Framework.RuleResult CheckMethod (Mono.Cecil.MethodDefinition method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.RuleResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="Mono.Cecil.MethodDefinition" />
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
