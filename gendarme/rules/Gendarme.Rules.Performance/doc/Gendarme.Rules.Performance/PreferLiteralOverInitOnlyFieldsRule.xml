<Type Name="PreferLiteralOverInitOnlyFieldsRule" FullName="Gendarme.Rules.Performance.PreferLiteralOverInitOnlyFieldsRule">
  <TypeSignature Language="C#" Value="public class PreferLiteralOverInitOnlyFieldsRule : Gendarme.Framework.Rule, Gendarme.Framework.ITypeRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.Performance</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Framework.Rule</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gendarme.Framework.ITypeRule</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.FxCopCompatibility("Microsoft.Performance", "CA1802:UseLiteralsWhereAppropriate")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.EngineDependency(typeof(Gendarme.Framework.Engines.OpCodeEngine))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("Replace the static readonly fields with const(ant) fields.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("Static readonly fields were found where a literal (const) field could be used.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule looks for <c>InitOnly</c> fields (<c>readonly</c> in C#) that could be
            turned into <c>Literal</c> (<c>const</c> in C#) because their value is known at
            compile time. <c>Literal</c> fields don't need to be initialized (i.e. they wont
            show up or add a static constructor to the type) resulting in less code and the
            value (not a reference to the field) will be directly used in the IL (but this
            can be a double-edged sword).
            </summary>
    <remarks>This rule is available since Gendarme 2.2</remarks>
    <example>
            Bad example:
            <code>
            public class ClassWithReadOnly {
            	static readonly int One = 1;
            }
            </code></example>
    <example>
            Good example:
            <code>
            public void MethodWithUsedParameters (IEnumerable enumerable)
            {
            	foreach (object item in enumerable) {
            		Console.WriteLine (item);
            	}
            }
            </code></example>
    <example>
            Bad example:
            <code>
            public class ClassWithReadOnly {
            	static readonly int One = 1;
            }
            </code></example>
    <example>
            Good example:
            <code>
            public void MethodWithUsedParameters (IEnumerable enumerable)
            {
            	foreach (object item in enumerable) {
            		Console.WriteLine (item);
            	}
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PreferLiteralOverInitOnlyFieldsRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckType">
      <MemberSignature Language="C#" Value="public Gendarme.Framework.RuleResult CheckType (Mono.Cecil.TypeDefinition type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.RuleResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Mono.Cecil.TypeDefinition" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
