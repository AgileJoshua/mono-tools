<Type Name="CompareWithEmptyStringEfficientlyRule" FullName="Gendarme.Rules.Performance.CompareWithEmptyStringEfficientlyRule">
  <TypeSignature Language="C#" Value="public class CompareWithEmptyStringEfficientlyRule : Gendarme.Framework.Rule, Gendarme.Framework.IMethodRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.Performance</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Framework.Rule</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gendarme.Framework.IMethodRule</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.FxCopCompatibility("Microsoft.Performance", "CA1820:TestForEmptyStringsUsingStringLength")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.EngineDependency(typeof(Gendarme.Framework.Engines.OpCodeEngine))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("Compare String.Length with 0 instead. The string length is known and it's faster to compare integers than to compare strings.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("This method compares a string with an empty string by using the Equals method or the equality (==) or inequality (!=) operators.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule will check the comparison of a string variable with <c>""</c> or
            <c>String.Empty</c>. This promote the use of the <c>String.Length</c> property.
            Another way to check for an empty string (and a null one at the same time) is available
            since the version 2.0 of the framework by using the static method
            <c>String.IsNullOrEmpty</c>.
            </summary>
    <remarks>To be added.</remarks>
    <example>
            Bad example:
            <code>
            public void SimpleMethod (string myString)
            {
            	if (myString.Equals (String.Empty)) {
            	}
            }
            </code></example>
    <example>
            Good example:
            <code>
            public void SimpleMethod (string myString)
            {
            	if (myString.Length == 0) {
            	}
            }
            </code></example>
    <example>
            Bad example:
            <code>
            public void SimpleMethod (string myString)
            {
            	if (myString.Equals (String.Empty)) {
            	}
            }
            </code></example>
    <example>
            Good example:
            <code>
            public void SimpleMethod (string myString)
            {
            	if (myString.Length == 0) {
            	}
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompareWithEmptyStringEfficientlyRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckMethod">
      <MemberSignature Language="C#" Value="public Gendarme.Framework.RuleResult CheckMethod (Mono.Cecil.MethodDefinition method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.RuleResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="Mono.Cecil.MethodDefinition" />
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
