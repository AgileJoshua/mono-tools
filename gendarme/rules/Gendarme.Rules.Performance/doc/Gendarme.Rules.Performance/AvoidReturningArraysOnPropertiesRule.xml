<Type Name="AvoidReturningArraysOnPropertiesRule" FullName="Gendarme.Rules.Performance.AvoidReturningArraysOnPropertiesRule">
  <TypeSignature Language="C#" Value="public class AvoidReturningArraysOnPropertiesRule : Gendarme.Framework.Rule, Gendarme.Framework.IMethodRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.Performance</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Framework.Rule</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gendarme.Framework.IMethodRule</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.FxCopCompatibility("Microsoft.Performance", "CA1819:PropertiesShouldNotReturnArrays")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("Return a read-only collection or replace the property by a method.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("By convention properties should not return arrays.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule check properties that returns arrays. Such properties can be dangerous,
            because the caller doesn't know whether it access the original (internal) array of
            the instance or if it gets a copy (clone) of the original. A solution is to turn
            such properties into methods and always return a copy of the array. Another is to
            use a proerty that returns a read-only collection.
            </summary>
    <remarks>To be added.</remarks>
    <example>
            Bad example:
            <code>
            public byte[] Foo {
            	get {
            		// return the data inside the instance
            		return foo;
            	}
            }
            public byte[] Bar {
            	get {
            		// return a copy of the instance's data
            		return (byte[]) bar.Clone ();
            	}
            }
            </code></example>
    <example>
            Good example:
            <code>
            public byte[] GetFoo ()
            {
            	return (byte[]) foo.Clone ();
            }
            public byte[] GetFoo ()
            {
            	return (byte[]) bar.Clone ();
            }
            </code></example>
    <example>
            Bad example:
            <code>
            public byte[] Foo {
            	get {
            		// return the data inside the instance
            		return foo;
            	}
            }
            public byte[] Bar {
            	get {
            		// return a copy of the instance's data
            		return (byte[]) bar.Clone ();
            	}
            }
            </code></example>
    <example>
            Good example:
            <code>
            public byte[] GetFoo ()
            {
            	return (byte[]) foo.Clone ();
            }
            public byte[] GetFoo ()
            {
            	return (byte[]) bar.Clone ();
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AvoidReturningArraysOnPropertiesRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckMethod">
      <MemberSignature Language="C#" Value="public Gendarme.Framework.RuleResult CheckMethod (Mono.Cecil.MethodDefinition method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.RuleResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="Mono.Cecil.MethodDefinition" />
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
