<Type Name="DoNotIgnoreMethodResultRule" FullName="Gendarme.Rules.Performance.DoNotIgnoreMethodResultRule">
  <TypeSignature Language="C#" Value="public class DoNotIgnoreMethodResultRule : Gendarme.Framework.Rule, Gendarme.Framework.IMethodRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.Performance</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Framework.Rule</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gendarme.Framework.IMethodRule</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.FxCopCompatibility("Microsoft.Usage", "CA1806:DoNotIgnoreMethodResults")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.EngineDependency(typeof(Gendarme.Framework.Engines.OpCodeEngine))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("You shouldn't ignore the result value.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("The method ignores the result value from the specified call.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule detects when some code doesn't use the return value of a method call.
            Since any returned object potentially requires memory allocations this impacts
            performance. Furthermore this often indicates that the code might not be doing
            what is expected. This is seen frequently on <c>string</c> where people forgets
            their immutability. There are some special cases, e.g. <c>StringBuilder</c>, where
            some methods returns the current instance (to chain calls). The rule will ignore
            those well known cases.
            </summary>
    <remarks>To be added.</remarks>
    <example>
            Bad example:
            <code>
            public void GetName ()
            {
            	string name = Console.ReadLine ();
            	// a new trimmed string is created by never assigned to anything
            	// but name itself is unchanged
            	name.Trim ();
            	Console.WriteLine ("Name: {0}", name);
            }
            </code></example>
    <example>
            Good example:
            <code>
            public void GetName ()
            {
            	string name = Console.ReadLine ();
            	name = name.Trim ();
            	Console.WriteLine ("Name: {0}", name);
            }
            </code></example>
    <example>
            Bad example:
            <code>
            public void GetName ()
            {
            	string name = Console.ReadLine ();
            	// a new trimmed string is created by never assigned to anything
            	// but name itself is unchanged
            	name.Trim ();
            	Console.WriteLine ("Name: {0}", name);
            }
            </code></example>
    <example>
            Good example:
            <code>
            public void GetName ()
            {
            	string name = Console.ReadLine ();
            	name = name.Trim ();
            	Console.WriteLine ("Name: {0}", name);
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DoNotIgnoreMethodResultRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckMethod">
      <MemberSignature Language="C#" Value="public Gendarme.Framework.RuleResult CheckMethod (Mono.Cecil.MethodDefinition method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.RuleResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="Mono.Cecil.MethodDefinition" />
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
