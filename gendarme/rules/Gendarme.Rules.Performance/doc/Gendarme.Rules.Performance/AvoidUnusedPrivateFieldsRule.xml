<Type Name="AvoidUnusedPrivateFieldsRule" FullName="Gendarme.Rules.Performance.AvoidUnusedPrivateFieldsRule">
  <TypeSignature Language="C#" Value="public class AvoidUnusedPrivateFieldsRule : Gendarme.Framework.Rule, Gendarme.Framework.ITypeRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.Performance</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Framework.Rule</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gendarme.Framework.ITypeRule</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.FxCopCompatibility("Microsoft.Performance", "CA1823:AvoidUnusedPrivateFields")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.EngineDependency(typeof(Gendarme.Framework.Engines.OpCodeEngine))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("Remove unused fields to reduce the memory required by the type or correct the use of the field.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("This type contains private fields that seems unused.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule checks all private fields inside each type to see if some of them are not
            being used. This could be a leftover from debugging or testing code or a more
            serious typo where a wrong field is being used. In any case this makes the type bigger
            than it needs to be and this can affect performance when a large number of instances
            exists.
            </summary>
    <remarks>To be added.</remarks>
    <example>
            Bad example:
            <code>
            public class Bad {
            	int level;
            	bool b;
            	public void Indent ()
            	{
            		level++;
            #if DEBUG
            		if (b) Console.WriteLine (level);
            #endif
            	}
            }
            </code></example>
    <example>
            Good example:
            <code>
            public class Good {
            	int level;
            #if DEBUG
            	bool b;
            #endif
            	public void Indent ()
            	{
            		level++;
            #if DEBUG
            		if (b) Console.WriteLine (level);
            #endif
            	}
            }
            </code></example>
    <example>
            Bad example:
            <code>
            public class Bad {
            	int level;
            	bool b;
            	public void Indent ()
            	{
            		level++;
            #if DEBUG
            		if (b) Console.WriteLine (level);
            #endif
            	}
            }
            </code></example>
    <example>
            Good example:
            <code>
            public class Good {
            	int level;
            #if DEBUG
            	bool b;
            #endif
            	public void Indent ()
            	{
            		level++;
            #if DEBUG
            		if (b) Console.WriteLine (level);
            #endif
            	}
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AvoidUnusedPrivateFieldsRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckType">
      <MemberSignature Language="C#" Value="public Gendarme.Framework.RuleResult CheckType (Mono.Cecil.TypeDefinition type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.RuleResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Mono.Cecil.TypeDefinition" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
