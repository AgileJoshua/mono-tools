<rules>
	<rule	Name="AvoidReturningArraysOnPropertiesRule" 
		Type="Gendarme.Rules.Performance.AvoidReturningArraysOnPropertiesRule, Gendarme.Rules.Performance, Version=@GENDARME_VERSION@, Culture=neutral, PublicKeyToken=null"
		Uri="http://www.mono-project.com/Gendarme.Rules.Performance#AvoidReturningArraysOnPropertiesRule" >
		<problem>The property '{0}' returns an array.</problem>
		<solution>Change the property to a method.</solution>
	</rule>
	<rule	Name="AvoidToStringOnStringsRule"
		Type="Gendarme.Rules.Performance.AvoidToStringOnStringsRule, Gendarme.Rules.Performance, Version=@GENDARME_VERSION@, Culture=neutral, PublicKeyToken=null"
		Uri="http://www.mono-project.com/Gendarme.Rules.Performance#AvoidToStringOnStringsRule">
		<problem>You are calling ToString () in a string in the member '{0}', this is redundant and may produce some performance penalities.</problem>
		<solution>You should remove the ToString () call.</solution>
	</rule>
	<rule	Name="AvoidUncalledPrivateCodeRule" 
		Type="Gendarme.Rules.Performance.AvoidUncalledPrivateCodeRule, Gendarme.Rules.Performance, Version=@GENDARME_VERSION@, Culture=neutral, PublicKeyToken=null"
		Uri="http://www.mono-project.com/Gendarme.Rules.Performance#AvoidUncalledPrivateCodeRule">
		<problem>A private or internal (assembly-level) member '{0}' does not have callers in the assembly, is not invoked by the common language runtime, and the member is not invoked by a delegate.</problem>
		<solution>Remove the non-callable code or add the code that calls it.</solution>
	</rule>
	<rule	Name="AvoidUninstantiatedInternalClassesRule" 
		Type="Gendarme.Rules.Performance.AvoidUninstantiatedInternalClassesRule, Gendarme.Rules.Performance, Version=@GENDARME_VERSION@, Culture=neutral, PublicKeyToken=null"
		Uri="http://www.mono-project.com/Gendarme.Rules.Performance#AvoidUninstantiatedInternalClassesRule">
		<problem>The internal type '{0}' is not instantiated by code within the assembly.</problem>
		<solution>Remove the type or add the code that uses it.  If the type contains only static methods then either add the static modifier to the type or add the private construtor to the type to prevent the compiler from emitting a default public instance constructor.</solution>
	</rule>
	<rule	Name="AvoidUnsealedUninheritedInternalClassesRule" 
		Type="Gendarme.Rules.Performance.AvoidUnsealedUninheritedInternalClassesRule, Gendarme.Rules.Performance, Version=@GENDARME_VERSION@, Culture=neutral, PublicKeyToken=null"
		Uri="http://www.mono-project.com/Gendarme.Rules.Performance#AvoidUnsealedUninheritedInternalClassesRule" >
		<problem>The type '{0}' should be sealed since it is not inherited from nor is it visibile outside the assembly.</problem>
		<solution>You should seal this type, unless you plan to inherit from this type in the near-future.</solution>
	</rule>
	<rule	Name="AvoidUnsealedConcreteAttributesRule" 
		Type="Gendarme.Rules.Performance.AvoidUnsealedConcreteAttributesRule, Gendarme.Rules.Performance, Version=@GENDARME_VERSION@, Culture=neutral, PublicKeyToken=null"
		Uri="http://www.mono-project.com/Gendarme.Rules.Performance#AvoidUnsealedConcreteAttributesRule" >
		<problem>The attribute '{0}' should be sealed.</problem>
		<solution>Unless you plan to inherit from this attribute you should consider to seal it's type.</solution>
	</rule>
	<rule	Name="AvoidUnusedParametersRule"
		Type="Gendarme.Rules.Performance.AvoidUnusedParametersRule, Gendarme.Rules.Performance, Version=@GENDARME_VERSION@, Culture=neutral, PublicKeyToken=null"
		Uri="http://www.mono-project.com/Gendarme.Rules.Performance#AvoidUnusedParametersRule">	
		<problem>The method '{0}' contains unused parameters.</problem>
		<solution>You should remove the unused parameters.</solution>
	</rule>
	<rule	Name="DontIgnoreMethodResultRule"
		Type="Gendarme.Rules.Performance.DontIgnoreMethodResultRule, Gendarme.Rules.Performance, Version=@GENDARME_VERSION@, Culture=neutral, PublicKeyToken=null"
		Uri="http://www.mono-project.com/Gendarme.Rules.Performance#DontIgnoreMethodResultRule">
		<problem>The member '{0}' ignores the result from the call.</problem>
		<solution>You shouldn't ignore this result.</solution>
	</rule>
	<rule	Name="EmptyDestructorRule" 
		Type="Gendarme.Rules.Performance.EmptyDestructorRule, Gendarme.Rules.Performance, Version=@GENDARME_VERSION@, Culture=neutral, PublicKeyToken=null"
		Uri="http://www.mono-project.com/Gendarme.Rules.Performance#EmptyDestructorRule" >
		<problem>The type '{0}' has an empty destructor (or Finalize method).</problem>
		<solution>Remove the empty destructor (or Finalize method) from the class.</solution>
	</rule>
	<rule	Name="IDisposableWithDestructorWithoutSuppressFinalizeRule" 
		Type="Gendarme.Rules.Performance.IDisposableWithDestructorWithoutSuppressFinalizeRule, Gendarme.Rules.Performance, Version=@GENDARME_VERSION@, Culture=neutral, PublicKeyToken=null"
		Uri="http://www.mono-project.com/Gendarme.Rules.Performance#IDisposableWithDestructorWithoutSuppressFinalizeRule" >
		<problem>The type '{0}' has a destructor and implements IDisposable. However it doesn't call System.GC.SuppressFinalize inside it's Dispose method.</problem>
		<solution>Add a call to GC.SuppressFinalize inside your Dispose method.</solution>
	</rule>
	<rule	Name="UseIsOperatorRule" 
		Type="Gendarme.Rules.Performance.UseIsOperatorRule, Gendarme.Rules.Performance, Version=@GENDARME_VERSION@, Culture=neutral, PublicKeyToken=null"
		Uri="http://www.mono-project.com/Gendarme.Rules.Performance#UseStringEmptyRule" >
		<problem>The method '{0}' should use the "is" operator and avoid the cast and compare to null.</problem>
		<solution>Replace the cast and compare to null with the simpler "is" operator.</solution>
	</rule>
	<rule	Name="UseStringEmptyRule" 
		Type="Gendarme.Rules.Performance.UseStringEmptyRule, Gendarme.Rules.Performance, Version=@GENDARME_VERSION@, Culture=neutral, PublicKeyToken=null"
		Uri="http://www.mono-project.com/Gendarme.Rules.Performance#UseStringEmptyRule" >
		<problem>The method '{0}' use literal "" instead of String.Empty.</problem>
		<solution>Change the empty string for String.Empty.</solution>
	</rule>
	<rule	Name="UsingStringLengthInsteadOfCheckingEmptyStringRule" 
		Type="Gendarme.Rules.Performance.UsingStringLengthInsteadOfCheckingEmptyStringRule, Gendarme.Rules.Performance, Version=@GENDARME_VERSION@, Culture=neutral, PublicKeyToken=null"
		Uri="http://www.mono-project.com/Gendarme.Rules.Performance#UsingStringLengthInsteadOfCheckingEmptyStringRule">
		<problem>The method '{0}' compares the empty string by using Equals ("").</problem>
		<solution>use String.Length instead.</solution>
	</rule>
</rules>
