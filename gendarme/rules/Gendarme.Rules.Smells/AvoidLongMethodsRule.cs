//
// Gendarme.Rules.Smells.AvoidLongMethodsRule class
//
// Authors:
//	Néstor Salceda <nestor.salceda@gmail.com>
//
// 	(C) 2007-2008 Néstor Salceda
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

using System;
using System.Collections;

using Mono.Cecil;
using Mono.Cecil.Cil;

using Gendarme.Framework;
using Gendarme.Framework.Rocks;

namespace Gendarme.Rules.Smells {
	[Problem ("Long methods are usually hard to understand and maintain.  The method can cause problems because contains more code than the maximum allowed.")]
	[Solution ("You should apply an Extract Method refactoring, but there are other solutions.")]
	public class AvoidLongMethodsRule : Rule,IMethodRule {
		private int maxInstructions = 170;
		const int AssignationRatio = 7;
		const int DefaultAmountOfElements = 13;
		static Hashtable typeMethodDictionary;

		static AvoidLongMethodsRule ()
		{
			typeMethodDictionary = new Hashtable ();
			typeMethodDictionary.Add ("Gtk.Bin", "Build");
			typeMethodDictionary.Add ("Gtk.Window", "Build");
			typeMethodDictionary.Add ("Gtk.Dialog", "Build");
			typeMethodDictionary.Add ("System.Windows.Forms.Form", "InitializeComponent");
		}

		public int MaxInstructions {
			get {
				return maxInstructions;
			}
			set {
				maxInstructions = value;
			}
		}

		private static bool IsAutogeneratedByTools (MethodDefinition method)
		{
			if (method.Parameters.Count != 0)
				return false;

			TypeDefinition type = method.DeclaringType.Resolve ();
			if ((type != null) && (type.BaseType != null)) {
				if (typeMethodDictionary.ContainsKey (type.BaseType.FullName))
					return (String.Compare (method.Name, (string) typeMethodDictionary[type.BaseType.FullName]) == 0);
			}
			return false;
		}

		private static int CountStaticFields (TypeDefinition type) {
			int counter = 0;
			foreach (FieldDefinition field in type.Fields) {
				if (field.IsStatic || field.IsInitOnly || field.HasConstant)
					counter++;
				//if the field is an array, we should take care
				//about their elements.
				ArrayType array = field.FieldType as ArrayType;
				if (array != null) {
					for (int index = 0; index < array.Dimensions.Count; index++)  
						//I can't calculate the array
						//length, then, i add a
						//default amount of elements 
						//TODO: Perhaps we can do other
						//approach with random nunbers?
						counter+= DefaultAmountOfElements;
				}
			}
			return counter;
		}

		private static int CountInstanceFields (TypeDefinition type) {
			int counter = 0;
			foreach (FieldDefinition field in type.Fields) {
				if (!(field.IsStatic || field.IsInitOnly || field.HasConstant))
					counter++;
				//I not take care about arrays here.
			}
			return counter;
		}

		public RuleResult CheckMethod (MethodDefinition method)
		{
			// rule does not apply if method as no code (e.g. abstract, p/invoke)
			// rule does not apply to code outside the developer's control
			// rule dess not apply to autogenerated code from some
			// tools
			if (!method.HasBody || method.IsGeneratedCode () || IsAutogeneratedByTools (method))
				return RuleResult.DoesNotApply;

			// rule applies!
			// success if the instruction count is below the defined threshold
			int max = MaxInstructions;
			if (method.IsConstructor && method.IsStatic) {
				max += CountStaticFields (method.DeclaringType as TypeDefinition) * AssignationRatio;
			}
			else if (method.IsConstructor && method.IsStatic) {
				max += CountInstanceFields (method.DeclaringType as TypeDefinition) * AssignationRatio;
			}

			if (method.Body.Instructions.Count <= max)
				return RuleResult.Success;

			string s = (Runner.VerbosityLevel < 2) ? String.Empty : 
				String.Format ("Method IL Size: {0}. Maximum Size: {1}", method.Body.Instructions.Count, max);

			Runner.Report (method, Severity.High, Confidence.Normal, s);	
			return RuleResult.Failure;
		}
	}
}
