<Type Name="ObsoleteMessagesShouldNotBeEmptyRule" FullName="Gendarme.Rules.BadPractice.ObsoleteMessagesShouldNotBeEmptyRule">
  <TypeSignature Language="C#" Value="public class ObsoleteMessagesShouldNotBeEmptyRule : Gendarme.Framework.Rule, Gendarme.Framework.ITypeRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.BadPractice</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Framework.Rule</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gendarme.Framework.ITypeRule</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("Provide helpful advice to help developers abandon old features and migrate to newer ones.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("The [Obsolete] attribute was used but no help, alternative or description was provided.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule warns if any type (including classes, structs, enums, interfaces and
            delegates), field, property, events, method and constructor are decorated with
            an empty <c>[Obsolete]</c> attribute. Marking anything with obsolete is helpful
            only if it includes some advice for the consumer on how to best deal with the
            situation (e.g. the new recommanded API to use).
            </summary>
    <remarks>To be added.</remarks>
    <example>
            Bad example:
            <code>
            [Obsolete]
            public byte[] Key {
            	get { return (byte[]) key.Clone (); }
            }
            </code></example>
    <example>
            Good example:
            <code>
            [Obsolete ("Use the new GetKey() method since properties should not return arrays.")]
            public byte[] Key {
            	get { return (byte[]) key.Clone (); }
            }
            </code></example>
    <example>
            Bad example:
            <code>
            [Obsolete]
            public byte[] Key {
            	get { return (byte[]) key.Clone (); }
            }
            </code></example>
    <example>
            Good example:
            <code>
            [Obsolete ("Use the new GetKey() method since properties should not return arrays.")]
            public byte[] Key {
            	get { return (byte[]) key.Clone (); }
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObsoleteMessagesShouldNotBeEmptyRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckType">
      <MemberSignature Language="C#" Value="public Gendarme.Framework.RuleResult CheckType (Mono.Cecil.TypeDefinition type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.RuleResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Mono.Cecil.TypeDefinition" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize (Gendarme.Framework.IRunner runner);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runner" Type="Gendarme.Framework.IRunner" />
      </Parameters>
      <Docs>
        <param name="runner">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
