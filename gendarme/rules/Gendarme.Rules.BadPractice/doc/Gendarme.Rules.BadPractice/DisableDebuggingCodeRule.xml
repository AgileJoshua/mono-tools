<Type Name="DisableDebuggingCodeRule" FullName="Gendarme.Rules.BadPractice.DisableDebuggingCodeRule">
  <TypeSignature Language="C#" Value="public class DisableDebuggingCodeRule : Gendarme.Framework.Rule, Gendarme.Framework.IMethodRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.BadPractice</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Framework.Rule</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gendarme.Framework.IMethodRule</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.EngineDependency(typeof(Gendarme.Framework.Engines.OpCodeEngine))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("If this code is used for debugging purpose then either use the Debug or Trace types or disable the code manually (e.g. using a preprocessor).")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("This method include calls to Console.WriteLine inside an assembly not compiled for console application (e.g. /target:exe).")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule check if non-console applications are using <c>Console.WriteLine</c> as
            a mean to help debugging issues. While useful the debugging code should, before its
            release be removed, moved inside methods decorated with <c>[Conditional("DEBUG")]</c> or
            <c>[Conditional("TRACE")]</c> or changed to use the <c>Debug</c> or <c>Trace</c> types.
            </summary>
    <remarks>This rule is available since Gendarme 2.0</remarks>
    <example>
            Bad example:
            <code>
            private byte[] GenerateKey ()
            {
            	byte[] key = new byte[16];
            	rng.GetBytes (key);
            	Console.WriteLine ("debug key = {0}", BitConverter.ToString (key));
            	return key;
            }
            </code></example>
    <example>
            Good example (removed):
            <code>
            private byte[] GenerateKey ()
            {
            	byte[] key = new byte[16];
            	rng.GetBytes (key);
            	return key;
            }
            </code></example>
    <example>
            Good example (changed):
            <code>
            private byte[] GenerateKey ()
            {
            	byte[] key = new byte[16];
            	rng.GetBytes (key);
            	Debug.WriteLine ("debug key = {0}", BitConverter.ToString (key));
            	return key;
            }
            </code></example>
    <example>
            Bad example:
            <code>
            private byte[] GenerateKey ()
            {
            	byte[] key = new byte[16];
            	rng.GetBytes (key);
            	Console.WriteLine ("debug key = {0}", BitConverter.ToString (key));
            	return key;
            }
            </code></example>
    <example>
            Good example (removed):
            <code>
            private byte[] GenerateKey ()
            {
            	byte[] key = new byte[16];
            	rng.GetBytes (key);
            	return key;
            }
            </code></example>
    <example>
            Good example (changed):
            <code>
            private byte[] GenerateKey ()
            {
            	byte[] key = new byte[16];
            	rng.GetBytes (key);
            	Debug.WriteLine ("debug key = {0}", BitConverter.ToString (key));
            	return key;
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DisableDebuggingCodeRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckMethod">
      <MemberSignature Language="C#" Value="public Gendarme.Framework.RuleResult CheckMethod (Mono.Cecil.MethodDefinition method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.RuleResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="Mono.Cecil.MethodDefinition" />
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize (Gendarme.Framework.IRunner runner);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runner" Type="Gendarme.Framework.IRunner" />
      </Parameters>
      <Docs>
        <param name="runner">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
