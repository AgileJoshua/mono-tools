<Type Name="DoNotUseLockedRegionOutsideMethodRule" FullName="Gendarme.Rules.Concurrency.DoNotUseLockedRegionOutsideMethodRule">
  <TypeSignature Language="C#" Value="public class DoNotUseLockedRegionOutsideMethodRule : Gendarme.Framework.Rule, Gendarme.Framework.IMethodRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.Concurrency</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Framework.Rule</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gendarme.Framework.IMethodRule</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("Rather use the lock{} statement in case your language is C#, or Thread.Monitor.Exit() in other case.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("This method uses Thread.Monitor.Enter() but doesn't use Thread.Monitor.Exit().")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule ensures the method atomicity.  You should put the
            Monitor.Enter and Monitor.Exit call in the same method, otherwise
            may have several headaches related to concurrency issues.
            </summary>
    <remarks>To be added.</remarks>
    <example>
            Bad example:
            <code>
            class BadExample {
            	int producer = 0;
            	public void EnteringMethod ()
            	{
            		Monitor.Enter ();
            		producer++;
            	}
            public void ExitingMethod ()
            	{
            		Monitor.Exit ();
            	}
            }
            </code></example>
    <example>
            Good example:
            <code>
            class GoodExample {
            	int producer = 0;
            	public void AddProducer ()
            	{
            		Monitor.Enter ();
            		producer++;
            		Monitor.Exit ();
            	}
            }
            </code></example>
    <example>
            Bad example:
            <code>
            class BadExample {
            	int producer = 0;
            	public void EnteringMethod ()
            	{
            		Monitor.Enter ();
            		producer++;
            	}
            public void ExitingMethod ()
            	{
            		Monitor.Exit ();
            	}
            }
            </code></example>
    <example>
            Good example:
            <code>
            class GoodExample {
            	int producer = 0;
            	public void AddProducer ()
            	{
            		Monitor.Enter ();
            		producer++;
            		Monitor.Exit ();
            	}
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DoNotUseLockedRegionOutsideMethodRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckMethod">
      <MemberSignature Language="C#" Value="public Gendarme.Framework.RuleResult CheckMethod (Mono.Cecil.MethodDefinition method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.RuleResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="Mono.Cecil.MethodDefinition" />
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize (Gendarme.Framework.IRunner runner);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runner" Type="Gendarme.Framework.IRunner" />
      </Parameters>
      <Docs>
        <param name="runner">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
