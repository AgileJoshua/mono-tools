<Type Name="DoNotLockOnThisOrTypesRule" FullName="Gendarme.Rules.Concurrency.DoNotLockOnThisOrTypesRule">
  <TypeSignature Language="C#" Value="public class DoNotLockOnThisOrTypesRule : Gendarme.Rules.Concurrency.LockAnalyzerRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.Concurrency</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Rules.Concurrency.LockAnalyzerRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("To be safe from outside always lock on something that is totally private to your code.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("This method use a lock(this) or lock(typeof(X)) construct which is often used incorrectly.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            You are asking for concurrency troubles.  If you are locking this,
            you should imagine a third man consuming your class, this man
            doesn't know if your code is locking or not.  And he, could think
            about locking the object (because it needs a thread-safe
            implementation), then this causes a deadlock.
            The second scenario is about locking types.  There are only one Type
            object for each instance of the class.  And this may cause several
            concurrency issues.
            </summary>
    <remarks>To be added.</remarks>
    <example>
            Bad example:
            <code>
            public void MethodLockingOnThis ()
            {
            	lock (this) {
            		producer++;
            }
            }
            </code><code>
            public void MethodLockingOnType ()
            {
            	lock (this.GetType ()) {
            		producer++;
            	}
            }
            </code></example>
    <example>
      <code>
            class ClassWithALocker {
            	object locker = new object ();
            	int producer = 0;
            	public void MethodLockingLocker ()
            	{
            		lock (locker) {
            			producer++;
            		}
            	}
            }
            </code>
      <code>
            [MethodImpl (MethodImplOptions.Synchronized)]
            public void SychronizedMethod ()
            {
            	producer++;
            }
            </code>
    </example>
    <example>
            Bad example:
            <code>
            public void MethodLockingOnThis ()
            {
            	lock (this) {
            		producer++;
            }
            }
            </code><code>
            public void MethodLockingOnType ()
            {
            	lock (this.GetType ()) {
            		producer++;
            	}
            }
            </code></example>
    <example>
      <code>
            class ClassWithALocker {
            	object locker = new object ();
            	int producer = 0;
            	public void MethodLockingLocker ()
            	{
            		lock (locker) {
            			producer++;
            		}
            	}
            }
            </code>
      <code>
            [MethodImpl (MethodImplOptions.Synchronized)]
            public void SychronizedMethod ()
            {
            	producer++;
            }
            </code>
    </example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DoNotLockOnThisOrTypesRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Analyze">
      <MemberSignature Language="C#" Value="public override void Analyze (Mono.Cecil.MethodDefinition method, Mono.Cecil.Cil.Instruction ins);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="Mono.Cecil.MethodDefinition" />
        <Parameter Name="ins" Type="Mono.Cecil.Cil.Instruction" />
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <param name="ins">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
