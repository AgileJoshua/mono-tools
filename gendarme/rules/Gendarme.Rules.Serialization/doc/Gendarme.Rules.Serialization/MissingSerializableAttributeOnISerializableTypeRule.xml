<Type Name="MissingSerializableAttributeOnISerializableTypeRule" FullName="Gendarme.Rules.Serialization.MissingSerializableAttributeOnISerializableTypeRule">
  <TypeSignature Language="C#" Value="public class MissingSerializableAttributeOnISerializableTypeRule : Gendarme.Framework.Rule, Gendarme.Framework.ITypeRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.Serialization</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Framework.Rule</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gendarme.Framework.ITypeRule</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.FxCopCompatibility("Microsoft.Usage", "CA2237:MarkISerializableTypesWithSerializable")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("Add [Serializable] to the type definition.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("The runtime won't consider this type as serializable unless your add the [Serializable] attribute to its definition.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule checks for types that implements <c>System.ISerializable</c> but are
            not decorated with the <c>[Serializable]</c> attribute. Implementing
            <c>System.ISerializable</c> is not enough to make a class serializable as this
            interface only gives you more control over the basic serialization process.
            In order for the runtime to know your type is serializable it must have the
            <c>[Serializable]</c> pseudo-attribute.
            </summary>
    <remarks>This rule is available since Gendarme 2.0</remarks>
    <example>
            Bad example:
            <code>
            // this type cannot be serialized by the runtime
            public class Bad : ISerializable {
            }
            </code></example>
    <example>
            Good example:
            <code>
            [Serializable]
            public class Good : ISerializable {
            }
            </code></example>
    <example>
            Bad example:
            <code>
            // this type cannot be serialized by the runtime
            public class Bad : ISerializable {
            }
            </code></example>
    <example>
            Good example:
            <code>
            [Serializable]
            public class Good : ISerializable {
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MissingSerializableAttributeOnISerializableTypeRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckType">
      <MemberSignature Language="C#" Value="public Gendarme.Framework.RuleResult CheckType (Mono.Cecil.TypeDefinition type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.RuleResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Mono.Cecil.TypeDefinition" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
