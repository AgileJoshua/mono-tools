<Type Name="CallBaseMethodsOnISerializableTypesRule" FullName="Gendarme.Rules.Serialization.CallBaseMethodsOnISerializableTypesRule">
  <TypeSignature Language="C#" Value="public class CallBaseMethodsOnISerializableTypesRule : Gendarme.Framework.Rule, Gendarme.Framework.ITypeRule" />
  <AssemblyInfo>
    <AssemblyName>Gendarme.Rules.Serialization</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Gendarme.Framework.Rule</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gendarme.Framework.ITypeRule</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Gendarme.Framework.FxCopCompatibility("Microsoft.Usage", "CA2236:CallBaseClassMethodsOnISerializableTypes")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.EngineDependency(typeof(Gendarme.Framework.Engines.OpCodeEngine))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Solution("Call the base method or constructor from your own code.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Gendarme.Framework.Problem("You are overriding the GetObjectData method or serialization constructor but you aren't calling to the base methods, and perhaps you aren't serializing / deserializing the fields of the base type.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            This rule checks types that implement the <c>System.ISerializable</c> interface
            and report if either the serialization constructor or the <c>GetObjectData</c>
            method does not call it's <c>base</c> type, potentially breaking the serialization
            process.
            </summary>
    <remarks>This rule is available since Gendarme 2.2</remarks>
    <example>
            Bad example:
            <code>
            [Serializable]
            public class Base : ISerializable {
            	// ...
            }
            [Serializable]
            public class Bad : Base {
            	int value;
            	protected BadDerived (SerializationInfo info, StreamingContext context)
            	{
            		value = info.GetInt32 ("value");
            	}
            	public override void GetObjectData (SerializationInfo info, StreamingContext context)
            	{
            		info.AddValue ("value", value);
            	}
            }
            </code></example>
    <example>
            Good example:
            <code>
            [Serializable]
            public class Base : ISerializable {
            	// ...
            }
            [Serializable]
            public class Good : Base {
            	int value;
            	protected BadDerived (SerializationInfo info, StreamingContext context) : base (info, context)
            	{
            		value = info.GetInt32 ("value");
            	}
            	public override void GetObjectData (SerializationInfo info, StreamingContext context)
            	{
            		info.AddValue ("value", value);
            		base.GetObjectData (info, context);
            	}
            }
            </code></example>
    <example>
            Bad example:
            <code>
            [Serializable]
            public class Base : ISerializable {
            	// ...
            }
            [Serializable]
            public class Bad : Base {
            	int value;
            	protected BadDerived (SerializationInfo info, StreamingContext context)
            	{
            		value = info.GetInt32 ("value");
            	}
            	public override void GetObjectData (SerializationInfo info, StreamingContext context)
            	{
            		info.AddValue ("value", value);
            	}
            }
            </code></example>
    <example>
            Good example:
            <code>
            [Serializable]
            public class Base : ISerializable {
            	// ...
            }
            [Serializable]
            public class Good : Base {
            	int value;
            	protected BadDerived (SerializationInfo info, StreamingContext context) : base (info, context)
            	{
            		value = info.GetInt32 ("value");
            	}
            	public override void GetObjectData (SerializationInfo info, StreamingContext context)
            	{
            		info.AddValue ("value", value);
            		base.GetObjectData (info, context);
            	}
            }
            </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CallBaseMethodsOnISerializableTypesRule ();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckType">
      <MemberSignature Language="C#" Value="public Gendarme.Framework.RuleResult CheckType (Mono.Cecil.TypeDefinition type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Gendarme.Framework.RuleResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Mono.Cecil.TypeDefinition" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
